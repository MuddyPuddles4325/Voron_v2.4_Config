#####################################################################
# 	Sheet Offset Macros
#####################################################################

[gcode_macro ULTISTIK_SHEET]
description: Set gcode offset for Ultistik sheet
gcode:
   SET_GCODE_OFFSET Z=-0.230

[gcode_macro WHAMBAM_SHEET]
description: Set gcode offset for Whambam sheet
gcode:
    SET_GCODE_OFFSET Z=0.135'

[gcode_macro SET_GCODE_OFFSET]
description: Save and set adjusted gcode offset
rename_existing: _SET_GCODE_OFFSET
gcode:
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}
    {% else %} 
        {% set offsets = {'x': None,'y': None,'z': None} %}
    {% endif %}
    
    {% set ns = namespace(offsets={'x': offsets.x,'y': offsets.y,'z': offsets.z}) %}
    
    _SET_GCODE_OFFSET {% for p in params %}{'%s=%s '% (p, params[p])}{% endfor %}

    {%if 'X' in params %}{% set null = ns.offsets.update({'x': params.X}) %}{% endif %}
    {%if 'Y' in params %}{% set null = ns.offsets.update({'y': params.Y}) %}{% endif %}
    {%if 'Z' in params %}{% set null = ns.offsets.update({'z': params.Z}) %}{% endif %}
    SAVE_VARIABLE VARIABLE=gcode_offsets VALUE="{ns.offsets}"

# Load gcode offset from file on startup
[delayed_gcode LOAD_GCODE_OFFSETS]
initial_duration: 2
gcode:  
    {% if printer.save_variables.variables.gcode_offsets %}
        {% set offsets = printer.save_variables.variables.gcode_offsets %}

        _SET_GCODE_OFFSET {% for axis, offset in offsets.items()
            if offsets[axis] %}{ "%s=%s " % (axis, offset) }{% endfor %}

        { action_respond_info("Loaded gcode offsets from saved variables [%s]" % (offsets)) }
    {% endif %}|


#####################################################################
# 	Print Start/Stop Macros
#####################################################################

[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:
    {% set chamber_temp = params.CHAMBER_TEMP|default(0)|int %}
    {% set hotend_temp = params.EXTRUDER_TEMP|default(210)|int %}
    {% set bed_temp = params.BED_TEMP|default(60)|int %}

    #SET_GCODE_OFFSET Z=0

    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed_temp}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend_temp}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber_temp}

    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0      											; cancel off timer (if there is one)
	UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0 													; cancel M191 timer (shouldn't be active)

	SET_PIN PIN=caselight VALUE=0.8																	; turn light on

	RESETSPEEDS																						; reset speeds to defaults

    M104 S140																						; set hotend to no-ooze temp
	ECHO_INFO MSG="Bring bed to temp with 5 min bed soak..."
	CG28																							; conditional home
	PARKCENTER						 																; move to center of bed
	M190 S{bed_temp} 																				; warm bed
	G4 P300000                      																; wait min 5 min for bed to warm

	{% if not printer["temperature_sensor enclosure_temp"].temperature >= chamber_temp %}		
		ECHO_INFO MSG="Chamber not at temp yet, pausing..."											; - if chamber is not at temp yet:
		HEATSOAK T={bed_temp} MOVE=1																; heatsoak and park in center
		M190 S{bed_temp} 																			; wait for bed final temp
		M191 S{chamber_temp}																		; wait for chamber final temp, start PRINT_START2 when reached
	{% else %}
		ECHO_INFO MSG="Chamber at or above temp."
		{% if printer.heater_bed.temperature < (bed_temp - 2) %}									; - if chamber is already at temp, but bed is not fully heated:
			HEATSOAK T={bed_temp} MOVE=1															; heatsoak and park
			M190 S{bed_temp} 																		; wait for bed final temp
		{% else %}																					; - if chamber + bed are already at temp:
			HEATSOAK T={bed_temp} MOVE=0															; "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
		{% endif %}
		PRINT_START2																				; if at temp, continue print_start (part 2)
	{% endif %}

# !! As mentioned above, only split into two parts because of my junky M191 macro. There is no need to do this otherwise.
[gcode_macro PRINT_START2]
description: Secondary print start function to support M191 function
gcode:
	#SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.printer.idle_timeout.timeout} 			; reset base idle timeout
	M106 S0																							; turn off part cooling fan (from heatsoak)
	#BED_MESH_CLEAR																					; clear bed mesh
	#ATTACH_PROBE_LOCK																				; attach klicky
	#QUAD_GANTRY_LEVEL
	ECHO_INFO MSG="Quad Gantry Leveling"
    G32                																				; quad gantry level
	#G28 Z																							; home z
	G90 													 										; absolute positioning
	#G0 Z20																							; hop up to prevent knocking probe off after homing Z
	#G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} F19500			; move to center of bed to prevent knocking probe off after homing Z (otherwise QGL just moves our Z hop down again before traveling)
    BED_MESH_PROFILE LOAD=default                                                                   ; load default mesh
    #SET_SHEET_Z_OFFSET                                                                              ; Set the GCODE offset for the last selected sheet  
	#BED_MESH_CALIBRATE																				; mesh
	#G28 Z																							; home z again
	#G0 Z20																							; hop up to prevent knocking probe off after homing Z
	#DOCK_PROBE_UNLOCK																				; stow probe, unlock
	PARKPURGE																						; park nozzle above purge bucket
	ECHO_INFO MSG="Heat extruder to final temp"
	M109 S{printer["gcode_macro PRINT_START"].hotendtemp|int} 										; set & wait for hotend final temp
	ECHO_INFO MSG="Cleaning nozzle"
    CLEAN_NOZZLE																					; clean nozzle while hot
    G28 Z       																					; calibrate z offset with hot nozzle
	#SWIPENOZZLE																					; swipe nozzle brush on way to print purge line
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1											; enable filament sensor
	SET_FAN_SPEED FAN=exhaust_fan SPEED=0.1															; set chamber fan to 10%
	# ECHO_INFO MSG="Purge Line....."
    # PURGE
    PRIME_LINE 																						; draw prime line
	G90                             														
	G1 Z5.0 F3000
    G92 E0                              															; reset Extruder
	#G1 X0 Y20 Z0.3 F19500.0           																; move to start position
	#G1 X0 Y200.0 Z0.3 F1500.0 E15     																; draw the first line
	#G92 E0
      
    ECHO_INFO MSG="Starting Print: { printer.print_stats.filename }"

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
  	SET_IDLE_TIMEOUT TIMEOUT=1800		    ; reset base idle timeout
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0												; disable filament sensor
	UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0    													; break chamber temp wait loop if it happens to be running
	CLEAR_PAUSE																							; clear pause (from M191) if there is one
	{% if printer.heater_bed.temperature >= 100 %}												
		SET_FAN_SPEED FAN=exhaust_fan SPEED=1  																; crank exhaust fan to 100% to evacuate chamber
	{% endif %}													
	M400                         	   																	; wait for buffer to clear
	G92 E0                                                                                              ; zero the extruder
    G1 E-10.0 F3600                                                                                     ; retract filament
	M104 S0						 	    			 													; turn only the hotend off
	M140 S0
	#M140 S{printer["gcode_macro PRINT_START"].bedtemp|int}												; return the bed to temp, some slicers like to turn it off
    M107                         	   			 	 													; turn off part cooling fan
	G91                             							 										; relative positioning
    G1 Z5 F3000                  	    			 													; move nozzle up 5mm
    G90                           	    			 													; absolute positioning
	G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F19500.0  					; park nozzle at rear
	BED_MESH_CLEAR																						; clear bed mesh									
	UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=300 													; turn exhaust off in 5 min
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=900    												; turn everything off in 30 min
	RESETSPEEDS																							; reset speed, accel etc to configured max values
	SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0														; disable XYE steppers (not z)
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
	#BEEP I=3	

#####################################################################
# 	PAUSE/RESUME/CANCEL
#####################################################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters
	{% set z = params.Z|default(10)|int %}																					; z hop amount
	
	{% if printer['pause_resume'].is_paused|int == 0 %}		
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}									; set hotend temp variable for reference in resume macro
								
		SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0																	; disable filament sensor		
		SAVE_GCODE_STATE NAME=PAUSE																							; save current print position for resume				
		BASE_PAUSE																											; pause print
		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
			G91																												; relative positioning
			G1 Z{z} F900																									; raise Z up by z hop amount
		{% else %}
			ECHO_INFO MSG="Pause zhop exceeds maximum Z height."													; if z max is exceeded, show message and set zhop value for resume to 0
			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
		{% endif %}
		G90																													; absolute positioning
		G1 XG0 X{printer.toolhead.axis_maximum.x/2} YG0 Y{printer.toolhead.axis_minimum.y+10} F19500						; park toolhead at front center
		SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
		M104 S0																												; turn off hotend
		SET_IDLE_TIMEOUT TIMEOUT=43200															    						; set timeout to 12 hours
	{% endif %}

# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	# Parameters
	{% set e = params.E|default(2.5)|int %}																				; nozzle prime amount
	
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1																	; enable filament sensor
	#RESETRGB																											; reset LCD color
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
	{% if etemp > 0 %}
		M109 S{etemp|int}																								; wait for hotend to heat back up
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)	
	G91																													; relative positioning
	M83																													; relative extruder positioning
	{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}												
		G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
	{% else %}						
		G1 Z{zhop * -1} F900																							; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
	{% endif %}								
	RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450																; restore position
	BASE_RESUME	

#####################################################################
# 	PURGE LINE
#####################################################################

# Prime Line
[gcode_macro PRIME_LINE]
description: Draw a prime line
gcode:
    SAVE_GCODE_STATE NAME=BEFORE_PRIME
    M117 Prime Line
    G0 X5.0 Y5.0 F5000.0  					; Go to X5 Y5
    G1 Z0.25 F600            				; Set nozzle height
    G92 E0.0                				; reset extrusion distance
    G1 X60.0 E9.0 F1000.0   				; intro line
    #G1 X100.0 E12.5 F1000.0 				; intro line
    G1 X100.0 E10 F1000.0 					; intro line
    G92 E0.0                				; reset extrusion distance
    G1 Z1 F5000             				; Lift Z
    RESTORE_GCODE_STATE NAME=BEFORE_PRIME  

# Purge Line
[gcode_macro PURGE]
description: Draw a purge line
gcode:
    SAVE_GCODE_STATE NAME=BEFORE_PURGE
    M117 Purging
    G0 X5 Y5 F5000
    G91
    G1 E9 F1000
    G90
    RESTORE_GCODE_STATE NAME=BEFORE_PURGE


#####################################################################
# 	CHAMBER TEMPERATURE WAIT
#####################################################################

# Wait for chamber temp, kick off wait loop if not already at temp
# !! I created this before temperature_wait existed. The only reason I still ise it is because it's cancelable.
# !! I honestly would not recommend using this, it's really junky,
# !! It pauses the print (if not at temp) during print_start, pausing CANNOT happen (properly at least) in the middle of a macro, so it requires PRINT_START being split into two parts. 
# !! There may be a more graceful way to fix this but I can't be bothered. "There is nothing more permanent than a temporary solution"

[gcode_macro M191]
description: Wait for the chamber temp to reach desired level
variable_chambertargettemp: 0
variable_waittime: 0.0
gcode:
	# Parameters
	{% set s = params.S|default(1)|float %}
	
	SET_GCODE_VARIABLE MACRO=M191 VARIABLE=chambertargettemp VALUE={s}									; set target temp for reference outside of the macro (for the loop)
	SET_GCODE_VARIABLE MACRO=M191 VARIABLE=waittime VALUE=0.0   							

	SET_IDLE_TIMEOUT TIMEOUT=10800																		; change timeout to 3 hrs for soak

	ECHO_INFO MSG="Chamber currently at {printer["temperature_sensor enclosure_temp"].temperature}C heating to {s}C"						
	{% if not printer["temperature_sensor enclosure_temp"].temperature >= s|float %}					; ##IF CHAMBER TEMP IS NOT ALREADY REACHED##
		ECHO_INFO MSG="Chamber not at temp yet, pausing..."				
			{% if not printer.pause_resume.is_paused %}					
				BASE_PAUSE														   						; pause if not already paused
			{% endif %}					
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=30						   							; start wait loop
	{% else %}					
		ECHO_INFO MSG="Chamber at or above temp, continuing..."				     						; ##IF CHAMBER TEMP IS ALREADY REACHED##
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0                           							; break wait loop if it happens to be running already (shouldn't be)
		{% if printer.pause_resume.is_paused %}					
			BASE_RESUME															   						; resume if paused (shouldn't be)
		{% endif %}					
		PRINT_START2													   								; run part 2 of PRINT_START
	{% endif %}
	
# This part will loop until the desired chamber temp is reached, then resume the print
[delayed_gcode M191-WAIT]
gcode:
	{% set calcwaittime = printer["gcode_macro M191"].waittime|float + 0.5 %}
	{% set setpoint = printer["gcode_macro M191"].chambertargettemp|float %}
	SET_GCODE_VARIABLE MACRO=M191 VARIABLE=waittime VALUE={calcwaittime}

	{% if printer["temperature_sensor enclosure_temp"].temperature >= printer["gcode_macro M191"].chambertargettemp|float %} ; ##IF CHAMBER TEMP IS REACHED##
		ECHO_INFO MSG="Chamber reached {printer["temperature_sensor enclosure_temp"].temperature}C / {setpoint}C after {calcwaittime}min, continuing..."
			{% if printer.pause_resume.is_paused %}
				BASE_RESUME														   											 ; break loop, resume print
				PRINT_START2											   												 ; run part 2 of PRINT_START
			{% endif %}
	{% else %}																											 ; ##IF CHAMBER TEMP IS NOT YET REACHED##
		ECHO_INFO MSG="Chamber heating {printer["temperature_sensor enclosure_temp"].temperature}C / {setpoint}C after {calcwaittime} min"
		UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=30						   											 ; continue waiting loop
	{% endif %}


[gcode_macro HEATSOAK]
description: Heat and move printhead to the center and turn on fan for heat soak
gcode:
	# Parameters
	{% set t = params.T|default(90)|int %}
	{% set move = params.MOVE|default(1)|int %}

	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
	SET_FAN_SPEED FAN=exhaust_fan SPEED=0		 		; turn off exhaust fan
	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M104 S180									; set hotend to no-ooze temp
		M106 S205 									; turn on part fan (80%)
	{% else %}
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										; conditional home
		PARKCENTER						 			; move to bed
	{% endif %}

#####################################################################
# 	CONDITIONAL HOMING
#####################################################################

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		G28
	{% endif %}
	
# Conditional G28 (home if not already homed)
[gcode_macro XYCG28]
gcode:
	{% if "xy" not in printer.toolhead.homed_axes %}
		G28 X Y
	{% endif %}

[gcode_macro ZCG28]
gcode:
	{% if "z" not in printer.toolhead.homed_axes %}
		G28 Z
	{% endif %}


[gcode_macro RESETSPEEDS]
description: Reset all speeds/accelerations
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

#####################################################################
# 	PARKING
#####################################################################

# Park front center
[gcode_macro PARKFRONT]
description: Park head in the front center of the bed
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
description: Park head front center at 20mm above bed
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+10} Z20 F19500										
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
description: Park head in the upper rear corner
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
description: Park head at the center of the build volume
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 15mm above center of bed
[gcode_macro PARKBED]
description: Park head 15mm above the center of bed
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED

# Park above center of bed purge bucket
[gcode_macro PARKPURGE]
description: Park head above the left side of the purge bucket
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKPURGE
	G90  
	G0 X{printer.toolhead.axis_minimum.x + 30} Z10 Y{printer.toolhead.axis_maximum.y} Z15 F19500
	RESTORE_GCODE_STATE NAME=PARKPURGE

#####################################################################
# 	ALIASES/SHORTCUTS
#####################################################################
	
# Convert Marlin linear advance commands to SET_PRESSURE_ADVANCE.
# Used in conjunction with Marlin's linear advance calibration tool: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
description: Translate Marlin linear advance to Klipper pressure advance
gcode:
	# Parameters
	{% set k = params.K|default(0)|float %}	
	SET_PRESSURE_ADVANCE ADVANCE={k}

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
description: Turn off heaters and motors
gcode:
	ECHO_INFO MSG="Turning off heaters and motors"
	M107                         	   			 	; turn print cooling fan off
	DISABLE_MOTORS									; turn steppers off
    TURN_OFF_HEATERS								; turn bed / hotend off
	SET_FAN_SPEED FAN=exhaust_fan SPEED=0  			; turn exhaust fan off
	#SET_FAN_SPEED FAN=BedOuter SPEED=0				; bed fan off
	#SET_FAN_SPEED FAN=BedInner SPEED=0				; bed fan off
	SET_PIN PIN=caselight VALUE=0					; turn light off

# Disable just the motors
[gcode_macro DISABLE_MOTORS]
description: Disable all motors
gcode:
    M18

# Filament runout / change alias	
[gcode_macro M600]
description: Override for filament change/pause function
gcode:
	PAUSE

[gcode_macro G32]
description: Home and perform quad gantry levelinng
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28
    
    ##	Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##	Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##	Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##	Uncomment for 350mm build
    #G0 X175 Y175 Z50 F3600
    #--------------------------------------------------------------------

#####################################################################
# 	FILAMENT
#####################################################################

[gcode_macro UNLOAD_FILAMENT]
description: Unload filament
gcode:
	SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83                                   ; set extruder to relative
	G1 E10 F600                           ; extrude a little to soften tip 
	G1 E-100 F1800                        ; retract filament completely
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
description: Load filament
gcode:
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	M83 ; set extruder to relative
	G1 E90 F600
	RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
description: Hot unload of filament
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    UNLOAD_FILAMENT
	
[gcode_macro HOT_LOAD]
description: Hot load of filament
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    LOAD_FILAMENT

#####################################################################
# 	MISC
#####################################################################

[delayed_gcode EXHAUST_OFF]
gcode:
	SET_FAN_SPEED FAN=exhaust_fan SPEED=0

[delayed_gcode DELAYED_OFF]
gcode:
    ECHO_INFO MSG="Delayed Off: Turning off everything"
	OFF  															; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)

# ECHO_INFO message to the console window
[gcode_macro ECHO_INFO]
gcode:
    {action_respond_info(params.MSG|default('')|string)}
	M117 {params.MSG|default('')|string}	

# Disable filament sensor 1 sec after startup, only enable during prints (in PRINT_START/PRINT_END)
[delayed_gcode DISABLEFILAMENTSENSOR]	
initial_duration: 1
gcode:
	SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

#### MACROS FOR Purge Bucket/Nozzle Scrubber #####
#### https://github.com/VoronDesign/VoronUsers/tree/master/printer_mods/edwardyeeks/Decontaminator_Purge_Bucket_&_Nozzle_Scrubber  ####

#######################################################################################################################################

# Sample macro config to be used in conjunction with the Decontaminator Purge Bucket & Nozzle Scrubber mod. Created by Hernsl 
# (hernsl#8860 on Discord) and edited by Edwardyeeks (edwardyeeks#6042 on Discord). Several ideas that made it as features by
# Deutherius (deutherius#3295 on Discord).

# The goal of this macro is to provide a nozzle scrubbing and purging routine that is easily copied/referenced into your  printer.cfg.
# Users can simply change parameters and enable/disable options in the first half. Descriptions are plentiful, making this macro
# look huge but informative and are laid out in sequence to be read first describing the line below; PLEASE READ CAREFULLY.

# This sample config assumes the following: The user has implemented the default decontaminator purge bucket & nozzle scrubber mod
# for the VORON 1/2. It can be tweaked to customised purge bucket geometries and brushes.

# Features in this macro: option of putting the bucket at the rear or front of the bed. Purge routine that can be enabled/disabled.
# By default, bucket is located at rear left of bed and purge routine is enabled. The purge and scrubbing routine is randomized
# in either left or right bucket to ensure as even as possible distribution of filament gunk.

# Default parameters are set for safe speeds and movements. Where necessary, tweak the parameters for the nozzle scrub procedure 
# to fit your printer.

# To avoid adding length of lines to your main printer.cfg config file, one can upload a config file separately into klipper and
# include it into the main printer config. Upload nozzle_scrub.cfg to the same directory as printer.cfg. Usually, it is in /home/pi/.
# Users of Fluidd, Mainsail and other klipper front ends would find it under /home/pi/klipper_config/.

# Once uploaded, add the following to your printer.cfg in the Macros section: [include /home/pi/nozzle_scrub.cfg] 
# Those running Fluidd, Mainsail and other front ends will need to use the following location instead:
# [include /home/pi/klipper_config/nozzle_scrub.cfg]

#######################################################################################################################################

# Name of the macro is clean_nozzle.

[gcode_macro CLEAN_NOZZLE]

# If you are putting your purge bucket at the rear left of the bed as per default installation, enable True on your location_bucket_rear 
# variable. If you want to put your purge bucket elsewhere (perhaps the front), then set it to False. See diagrams and description 
# further below on how to set your XY position.
variable_location_bucket_rear:      True

# If you want the purging routine in your bucket enabled, set to True (and vice versa).
variable_enable_purge:              True

# These parameters define your filament purging. The retract variable is used to retract right after purging to prevent unnecessary
# oozing. Some filament are particularly oozy and may continue to ooze out of the nozzle for a second or two after retracting. The
# ooze dwell variable makes allowance for this. Update as necessary. If you decided to not enable purge, you can ignore this section.
variable_purge_len:            10	         ; Amount of filament, in mm, to purge.
variable_purge_spd:           150	         ; Speed, in mm/min, of the purge.
variable_purge_temp_min:      240	         ; Minimum nozzle temperature to permit a purge. Otherwise, purge will not occur.
variable_purge_ret:             2            ; Retract length, in mm, after purging to prevent slight oozing. Adjust as necessary.
variable_ooze_dwell:            2            ; Dwell/wait time, in seconds, after purging and retracting.

# Adjust this so that your nozzle scrubs within the brush. Currently defaulted to be a lot higher for safety. Be careful not to go too low!
variable_brush_top:            2.5

# These parameters define your scrubbing, travel speeds, safe z clearance and how many times you want to wipe. Update as necessary. Wipe 
# direction is randomized based off whether the left or right bucket is randomly selected in the purge & scrubbing routine.
variable_clearance_z:           5	         ; When traveling, but not cleaning, the clearance along the z-axis between nozzle and brush.
variable_wipe_qty:              3	         ; Number of complete (A complete wipe: left, right, left OR right, left, right) wipes.
variable_prep_spd_xy:        3000	         ; Travel (not cleaning) speed along x and y-axis in mm/min.
variable_prep_spd_z:         1500	         ; Travel (not cleaning) speed along z axis in mm/min.
variable_wipe_spd_xy:        5000	         ; Nozzle wipe speed in mm/min.


# These parameters define the size of the brush. Update as necessary. A visual reference is provided below. Note that orientation of 
# parameters remain the same whether bucket is at rear or front.
# 
#                  ←   brush_width   →                            
#                   _________________                                                          ↑
#                  |                 |  ↑                     If you chose location_bucket_rear = True, Y position is acquired
#  brush_start (x) |                 | brush_depth            from your stepper_y position_max. Adjust your brush physically in
#                  |_________________|  ↓                               Y so that the nozzle scrubs within the brush.       
#                          (y)                                                                 ↓
#                      brush_front
# __________________________________________________________
#                     PRINTER FRONT
# 
# 
## For V1.8, you may need to measure where your brush is on the x axis and input manually into any of the variable_brush_start uncommented.
## For V2.4 250mm build, uncomment this below: 
#variable_brush_start:     25	    

## For V2.4 300mm build, uncomment this below:
#variable_brush_start:     50

## For V2.4 350mm build, uncomment this below:
variable_brush_start:     75

# This value is defaulted from brush location in CAD (rear left). Change if your brush width is different.
variable_brush_width:          52	

## These are only used if location_bucket_rear is False. You specify a custom location in y axis for your brush - see diagram above. ##
variable_brush_front:       0          
variable_brush_depth:       0          


# These parameters define the size of your purge bucket. Update as necessary. If you decided to not enable purge, you can ignore 
# this section. A visual reference is provided below. Note that orientation of parameters remain the same whether bucket is at rear 
# or front.
# 
#                                     bucket_gap
#                                      ← ---- →
#                     __________________________________________
#                    |                 |      |                 |      
#                    |                 |      |                 |
#  bucket_start (x)  |                 |______|                 |
#                    |                 |      |                 |
#                    |                 |      |                 |
#                    |_________________|. . . |_________________|
#                     ← ------------- →        ← ------------- →
#                     bucket_left_width        bucket_right_width
#  _______________________________________________________________________________________
#                                    PRINTER FRONT
# 
## For V2.4 250mm build, uncomment below 
#variable_bucket_left_width:    42

## For V2.4 300mm build, uncomment below
#variable_bucket_left_width:    67

## For V2.4 350mm build, uncomment below
variable_bucket_left_width:    92   

# These values are defaulted from bucket geometry in CAD (rear left location). Change only if you're using a custom bucket.
variable_bucket_right_width:   40            
variable_bucket_gap:           22	

# For V1.8, you may need to measure where your bucket start is and input into bucket_start. Otherwise, a value of 0 is for a default
# installation of purge bucket at rear left.
variable_bucket_start: 0


###############################################################################################################################################
###############################################################################################################################################

### From here on, unless you know what you're doing, it's recommended not to change anything. Feel free to peruse the code and reach out to me
### (edwardyeeks#6042) on Discord if you spot any problems!

###############################################################################################################################################
###############################################################################################################################################

# Placeholder. The variable will later be set to contain, at random, a number representing the left or right bucket.
variable_bucket_pos:            1	        

gcode:

	  CG28
      ## Save the gcode state in this macro instance.
      SAVE_GCODE_STATE NAME=CLEAN_NOZZLE

      ## Set to absolute positioning.
      G90

      ## Grab max position of Y-axis from config to use in setting a fixed y position for location_bucket_rear = True.
      {% set Ry = printer.configfile.config["stepper_y"]["position_max"]|float %}

      ## Check if user enabled purge option or not.
      {% if enable_purge %}

         ### Randomly select left or right bin for purge. 0 = left, 1 = right
         SET_GCODE_VARIABLE MACRO=CLEAN_NOZZLE VARIABLE=bucket_pos VALUE={(range(2) | random)}

         ### Raise Z for travel.
         G1 Z{brush_top + clearance_z} F{prep_spd_z}

         ### Check if user chose to use rear location.
         {% if location_bucket_rear %}
            G1 Y{Ry} F{prep_spd_xy}
         {% else %}
            G1 Y{brush_front + (brush_depth / 2)} F{prep_spd_xy}
         {% endif %}

         ### Position for purge. Randomly selects middle of left or right bucket. It references from the middle of the left bucket.
         G1 X{bucket_start + (bucket_left_width / (2 - bucket_pos)) + (bucket_pos * bucket_gap) + (bucket_pos * (bucket_right_width / 2))}

         ### Perform purge if the temp is up to min temp. If not, it will skip and continue executing rest of macro. Small retract after
         ### purging to minimize any persistent oozing at 5x purge_spd. G4 dwell is in milliseconds, hence * 1000 in formula.
         {% if printer.extruder.temperature >= purge_temp_min %}
            M83      ; relative mode
            G1 E{purge_len} F{purge_spd}
            G1 E-{purge_ret} F{purge_spd * 5}
            G4 P{ooze_dwell * 1000}
            G92 E0   ; reset extruder
         {% endif %}

      {% endif %}
   
      ## Position for wipe. Either left or right of brush based off bucket_pos to avoid unnecessary travel.
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 X{brush_start + (brush_width * bucket_pos)} F{prep_spd_xy}

      ## Check if user chose to use rear location.
      {% if location_bucket_rear %}
         G1 Y{Ry}
      {% else %}
         G1 Y{brush_front + (brush_depth / 2)}
      {% endif %}

      ## Move nozzle down into brush.
      G1 Z{brush_top} F{prep_spd_z}
   
      ## Perform wipe. Wipe direction based off bucket_pos for cool random scrubby routine.
      {% for wipes in range(1, (wipe_qty + 1)) %}
         G1 X{brush_start + (brush_width * (1 - bucket_pos))} F{wipe_spd_xy}
         G1 X{brush_start + (brush_width * bucket_pos)} F{wipe_spd_xy}
      {% endfor %}
   
      ## Clear from area.
      M117 Cleaned!
      G1 Z{brush_top + clearance_z} F{prep_spd_z}
      G1 X{bucket_left_width / 4} F{prep_spd_xy} 

      ## Restore the gcode state to how it was before the macro.
      RESTORE_GCODE_STATE NAME=CLEAN_NOZZLE

#########  Search macro to help find printer objects  ###########
#########    example: SEARCH_VARS s="search term"     ###########
[gcode_macro SEARCH_VARS]
description: Search macro to help find printer objects 
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 
                
            {% endfor %}
        {% endif %} 
    {% endfor %}


######################### CONFIG BACKUP #########################

# # https://github.com/th33xitus/kiauh/wiki/How-to-autocommit-config-changes-to-github%3F
# [gcode_macro BACKUP_CFG]
# gcode:
#     RUN_SHELL_COMMAND CMD=backup_cfg
	
# [gcode_shell_command backup_cfg]
# command: sh /home/pi/gitbackup.sh
# timeout: 30.
# verbose: True