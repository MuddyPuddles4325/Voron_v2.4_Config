
#####################################################################
# 	Probe
#####################################################################

[probe]
##	Klicky Probe
##	This probe is not used for Z height, only Quad Gantry Leveling
pin: PG11
z_offset = 6.42
x_offset: 0 
y_offset: 19.75
speed: 4
lift_speed: 10
samples: 4
samples_result: median
sample_retract_dist: 1.0
samples_tolerance: 0.006
samples_tolerance_retries: 10

#####################################################################
# 	Homing
#####################################################################
[safe_z_home]
##	XY Location of the Z Endstop Switch
##	Update -10,-10 to the XY coordinates of your endstop pin 
##	(such as 157,305) after going through Z Endstop Pin
##	Location Definition step.
home_xy_position:227,356
speed:100
z_hop:10

#####################################################################
# 	Mesh
#####################################################################
[bed_mesh]
speed: 150
horizontal_move_z: 15
mesh_min: 20,20.0
mesh_max: 330,330
relative_reference_index: 40
probe_count: 9,9
algorithm: bicubic
fade_start: 1
fade_end: 10
fade_target: 0

#####################################################################
#    Gantry Adjustment Routines
#####################################################################
[quad_gantry_level]
##	Gantry Corners for 350mm Build
gantry_corners:
	-60,-10
	410,420
#	Probe points
points:
	50,25
	50,275
	300,275
	300,25
speed: 300
horizontal_move_z: 12
retries: 5
retry_tolerance: 0.007
max_adjust: 10

#####################################################################
#    Macros
#####################################################################
[gcode_macro _Probe_Variables]
variable_probe_attached:            False
variable_probe_state:               False
variable_probe_lock:                False
variable_z_endstop_x:               0
variable_z_endstop_y:               0
gcode:


[gcode_macro _Homing_Variables]
gcode:
    {% set R  = params.RESET|default(0)  %}

    {% if R %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
   {% endif %}

# Attach probe and lock it
[gcode_macro Attach_Probe_Lock]
description: Attaches Klicky Probe, can only be docked after unlocking
gcode:
    Attach_Probe
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }


# Dock probe and lock it
[gcode_macro Dock_Probe_Unlock]
description: Docks Klicky Probe even if it was locked
gcode:
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }
    Dock_Probe

# Unlock Probe
[gcode_macro Probe_Unlock]
description: Unlocks Klicky Probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ False }

# Lock Probe
[gcode_macro Probe_Lock]
description: Locks Klicky Probe state
gcode:
    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_lock VALUE={ True }

# Attach Probe Routine
[gcode_macro Attach_Probe]
description: Attaches Klicky Probe
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro _Probe_Variables"].probe_attached %}
    {% set L = printer["gcode_macro _Probe_Variables"].probe_lock %}
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro _User_Variables"].docklocation_x %}
    {% set Dy = printer["gcode_macro _User_Variables"].docklocation_y %}
    {% set Dz = printer["gcode_macro _User_Variables"].docklocation_z %}
    {% set Da = printer["gcode_macro _User_Variables"].dockarmslenght %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro _User_Variables"].home_z_height|float %}
    #Set speed
    {% set St = printer["gcode_macro _User_Variables"].travel_speed * 60    %}

    #prior to saving actual position, check if its necessary to move to a safe Z
    #that has enought overhead for the attached probe
    {% if (printer.toolhead.position.z < Hzh) %}
        G1 Z{Hzh} F1200
    {% endif %}
    M400 # mandatory to save the new safe position
    #allows the docking position to be independent of the Z offset, necessary for bed mounted probes
    SAVE_GCODE_STATE name=_attachProbe
    _SET_GCODE_OFFSET Z=0

    # if x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }

    # If probe not attached and locked
    {% elif not P and not L %}
        {% if V %}
            { action_respond_info("Attaching Probe") }
        {% endif %}
        G90

        {% if (not 'z' in printer.toolhead.homed_axes) %}
            {% if V %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        {% if (printer.toolhead.position.z < Hzh) %}
            G1 Z{Hzh} F1200
        {% endif %}

        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} F{St}
        {% if Dz != -128 %}
          #lower to Z dock
          G1 Z{Dz} F600
        {% endif %}
        # pickup from Probe location
        G1 X{Dx} Y{Dy} F1800
        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} F6000
        #Go to Z safe distance
        {% if (printer.toolhead.position.z < Hzh) %}
          G1 Z{Hzh} F600
        {% endif %}
        _Park_Toolhead

        _CheckProbe action=attach

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe attached, do nothing
        _CheckProbe action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already attached!") }
        {% endif %}

        # Probe attached, do nothing
        _CheckProbe action=query

    {% endif %}
    #reverts to the original Z offset
    RESTORE_GCODE_STATE name=_attachProbe


# Dock Probe Routine
[gcode_macro Dock_Probe]
description: Docks Klicky Probe
gcode:
    # Get probe attach status
    {% set P = printer["gcode_macro _Probe_Variables"].probe_attached %}
    {% set L = printer["gcode_macro _Probe_Variables"].probe_lock %}
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    # Get Docking location
    {% set Dx = printer["gcode_macro _User_Variables"].docklocation_x %}
    {% set Dy = printer["gcode_macro _User_Variables"].docklocation_y %}
    {% set Dz = printer["gcode_macro _User_Variables"].docklocation_z %}
    {% set Da = printer["gcode_macro _User_Variables"].dockarmslenght %}
    # Safe Z for travel
    {% set Hzh = printer["gcode_macro _User_Variables"].home_z_height|float %}
    # Set speed
    {% set St = printer["gcode_macro _User_Variables"].travel_speed * 60    %}
    {% set Sd = printer["gcode_macro _User_Variables"].dock_speed * 60    %}
    {% set Sr = printer["gcode_macro _User_Variables"].release_speed * 60    %}
    {% set Sz = printer["gcode_macro _User_Variables"].z_drop_speed * 60    %}

    M400 # mandatory to save the new safe position
    #allows the docking position to be independent of the Z offset, necessary for bed mounted probes
    SAVE_GCODE_STATE name=_dockProbe
    _SET_GCODE_OFFSET Z=0

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }

    # If probe not attached and not locked
    {% elif P and not L %}
        {% if V %}
            { action_respond_info("Docking Probe") }
        {% endif %}
        G90

        {% if (printer.toolhead.position.z < Hzh) %}
            G1 Z{Hzh} F{Sz}
        {% endif %}

        # Probe entry location
        G1 X{Dx} Y{Dy|int - Da|int} F{St}
        {% if Dz != -128 %}
          #lower to Z dock
          G1 Z{Dz} F600
        {% endif %}
        # Drop Probe to Probe location
        G1 X{Dx} Y{Dy} F{Sd}
        # Probe decoupling
        G1 X{Dx|int + 40} Y{Dy} F{Sr}
        #Go to Z safe distance
        {% if (printer.toolhead.position.z < Hzh) %}
          G1 Z{Hzh} F600
        {% endif %}

        _Park_Toolhead

        G4 P1000
        _CheckProbe action=dock

    {% elif L %}
        {% if V %}
            { action_respond_info("Probe locked!") }
        {% endif %}

        # Probe docked, do nothing
        _CheckProbe action=query

    {% else %}
        {% if V %}
            { action_respond_info("Probe already docked!") }
        {% endif %}

        # Probe docked, do nothing
        _CheckProbe action=query

    {% endif %}
    #reverts to the original Z offset
    RESTORE_GCODE_STATE name=_dockProbe



# Quad Gantry Level
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing:             _QUAD_GANTRY_LEVEL
description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
gcode:
    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    {% if V %}
        { action_respond_info("QG Level") }
    {% endif %}
    _CG28

    _CheckProbe action=query
    Attach_Probe

    _QUAD_GANTRY_LEVEL {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
            endfor %}
    Dock_Probe
    #G28 Z

# Bed Mesh Calibrate
[bed_mesh]

[gcode_macro BED_MESH_CALIBRATE]
rename_existing:             _BED_MESH_CALIBRATE
description: Perform Mesh Bed Leveling with klicky automount
gcode:

    {% set V = printer["gcode_macro _User_Variables"].verbose %}
    {% if V %}
        { action_respond_info("Bed Mesh Calibrate") }
    {% endif %}

    _CheckProbe action=query
    Attach_Probe

    _BED_MESH_CALIBRATE {% for p in params
           %}{'%s=%s ' % (p, params[p])}{%
          endfor %}

    Dock_Probe


# Probe Calibrate
[gcode_macro PROBE_CALIBRATE]
rename_existing:             _PROBE_CALIBRATE
description:Calibrate the probes z_offset with klicky automount
gcode:
    {% set Hzh = printer["gcode_macro _User_Variables"].home_z_height|float %}
    {% set Sz = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro _User_Variables"].travel_speed %}
    {% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    {% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set Ox = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    G1 Z{Hzh} F{Sz}
    #Protect against PROBE CALIBRATE performed from outside the bed
    {% if (printer['gcode_move'].position.y > (My - Oy)) or (printer['gcode_move'].position.x > (Mx - Ox)) or (printer['gcode_move'].position.x < Ox) %}
      { action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!!!") }
    {% endif%}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=_original_nozzle_location
    
    _CheckProbe action=query
    Attach_Probe

    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}

    _PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

	#store current nozzle location
	SAVE_GCODE_STATE NAME=_original_nozzle_location  
    Dock_Probe
	
    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}


# Probe Accuracy
[gcode_macro PROBE_ACCURACY]
rename_existing:             _PROBE_ACCURACY
description:Probe Z-height accuracy at current XY position with klicky automount
gcode:
    {% set Hzh = printer["gcode_macro _User_Variables"].home_z_height|float %}
    {% set Sz = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
    {% set St = printer["gcode_macro _User_Variables"].travel_speed %}
    {% set By = printer["gcode_macro _User_Variables"].max_bed_y %}
    {% set Oy = printer['configfile'].config["probe"]["y_offset"]|float %}

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    G1 Z{Hzh} F{Sz}
    #Protect against PROBE ACCURACY performed from outside the bed
    {% if (printer.toolhead.position.y > (By - Oy)) %}
      { action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!!!") }
    {% endif%}
    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=_original_nozzle_location

    _CheckProbe action=query
    Attach_Probe

    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}

    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

	#store current nozzle location
	SAVE_GCODE_STATE NAME=_original_nozzle_location 
	
	Dock_Probe
	
    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED={St}


# enable to SET_KINEMATIC_POSITION for Z hop
[force_move]
enable_force_move: True

# Home Z Routine
[gcode_macro _Home_Z]
gcode:
    {% set Zx = printer["gcode_macro _Probe_Variables"].z_endstop_x         %}
    {% set Zy = printer["gcode_macro _Probe_Variables"].z_endstop_y         %}
    {% set Hzh = printer["gcode_macro _User_Variables"].home_z_height|float %}
    {% set St = printer["gcode_macro _User_Variables"].travel_speed * 60    %}
    {% set Sz = printer["gcode_macro _User_Variables"].z_drop_speed * 60    %}

    # if x and y are not homed yet, raise error
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }

    {% else %}
        {% if (not 'z' in printer.toolhead.homed_axes) %}
            {% if V %}
                { action_respond_info("Resetting Z position to zero") }
            {% endif %}
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        # move tool to safe homing position and home Z axis
        # location of z endstop
        G1 X{Zx} Y{Zy} Z{Hzh} F{St}
        G28 Z0
        G1 Z{Hzh} F{Sz}

    {% endif %}


# check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro _CheckProbe]
variable_probe_state:           0
gcode:
    Query_Probe
    _SetProbeState action={ ACTION }


# due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SetProbeState]
gcode:
    {% set P = printer.probe.last_query %}
    {% set V = printer["gcode_macro _User_Variables"].verbose %}

    # If triggered (true), probe not attached
    {% if P %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ False }

    # If not triggered (false), probe attached
    {% else %}
        SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ True }
    {% endif %}

    {% if params.ACTION == 'query' %}
          SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ P }
    {% endif %}

    # if probe fails to attach/detach
    # if not docked
    {% if (not P and params.ACTION == 'dock') %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # if not attached
    {% if P and params.ACTION == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}

# Park Toolhead Routine
[gcode_macro _Park_Toolhead]
gcode:
    {% set P = printer["gcode_macro _User_Variables"].park_toolhead %}
    {% set Px = printer["gcode_macro _User_Variables"].parkposition_x %}
    {% set Py = printer["gcode_macro _User_Variables"].parkposition_y %}
    {% set Pz = printer["gcode_macro _User_Variables"].parkposition_z %}
    {% set St = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
    {% set V = printer["gcode_macro _User_Variables"].verbose %}

    {% if (P and 'xyz' in printer.toolhead.homed_axes) %}
        {% if V %}
            { action_respond_info("Parking Toolhead") }
        {% endif %}
        G90
        G1 X{Px} Y{Py} Z{Pz} F{St}
    {% endif %}