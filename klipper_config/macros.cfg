#####################################################################
# 	Print Start/Stop Macros
#####################################################################

[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in _PRINTSTART_POSTSOAK
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
variable_swapcounter: 0
gcode:
    {% set chamber_temp = params.CHAMBER_TEMP|default(0)|int %}
    {% set hotend_temp = params.EXTRUDER_TEMP|default(210)|int %}
    {% set bed_temp = params.BED_TEMP|default(60)|int %}
    {% set init_extruder = params.INITIAL_EXTRUDER|default(0)|int %}
    {% set curtemp = printer["temperature_sensor enclosure_temp"].temperature|default(0)|int %}

    {% set REFERENCED_TOOLS = params.REFERENCED_TOOLS|default("")|string %}
    {% set INITIAL_TOOL = params.INITIAL_TOOL|default(0)|int %}

    {% if REFERENCED_TOOLS == "!referenced_tools!" %}
        RESPOND MSG="Happy Hare gcode pre-processor is diabled"
        {% set REFERENCED_TOOLS = INITIAL_TOOL %}
    {% elif REFERENCED_TOOLS == "" %}
        RESPOND MSG="Happy Hare single color print"
        {% set REFERENCED_TOOLS = INITIAL_TOOL %}
    {% endif %}

    CLEAR_PAUSE
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed_temp}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend_temp}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber_temp}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=swapcounter VALUE=0

    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0      											; cancel off timer (if there is one)
    UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0 													; cancel M191 timer (shouldn't be active)

    LIGHTS_ON																						; turn light on

    RESETSPEEDS																						; reset speeds to defaults

    _ECHO_INFO MSG="Preparing to Print: { printer.print_stats.filename }"
    _ECHO_INFO MSG="Chamber temperature: {curtemp}, Target Temperature: {chamber_temp}"

    _SET_RESTORE_HOTENDTEMP S={hotend_temp|int}
    #SETUP_KAMP_MESHING led_enable=TRUE
    #SETUP_LINE_PURGE purge_amount=40 line_length=70 flow_rate=15 distance_to_object_y=10 x_default=5 y_default=5

    M104 S150																						; set hotend to no-ooze temp
    M140 S{bed_temp}
    G28																								; home

    #MMU_CHECK_GATE TOOLS={REFERENCED_TOOLS}

    #Clean Nozzle Action
    G0 Z20                                                                                          ; hop up to prevent knocking probe off after homing Z
    PARKPURGE
    _ECHO_INFO MSG="Heat Nozzle before cleaning"
    STATUS_HEATING
    M109 S250																						; heat nozzle to clean temp
    _ECHO_INFO MSG="Cleaning Nozzle"										                    	; clean nozzle while hot
    SET_GCODE_VARIABLE MACRO=CLEAN_NOZZLE VARIABLE=enable_purge VALUE=False							; disable purge when filament is not loaded
    CLEAN_NOZZLE
    SET_GCODE_VARIABLE MACRO=CLEAN_NOZZLE VARIABLE=enable_purge VALUE=True							; re enable purge after cleaning
    status_cooling
    M104 S150																						; set hotend to no-ooze temp
    _ECHO_INFO MSG="Nozzle Clean, Cooling to probe temp"										    ; clean nozzle while hot

    PARKCENTER						 																; move to center of bed
    STATUS_HEATING
    _ECHO_INFO MSG="Bring bed to temp...{bed_temp}C"
    M190 S{bed_temp} 																				; warm bed



    {% if (curtemp < chamber_temp) and (printer['output_pin skip_soak'].value|int < 1) %}
        _ECHO_INFO MSG="Chamber not at temp yet, pausing..."										; - if chamber is not at temp yet:
        HEATSOAK T={bed_temp} MOVE=1																; heatsoak and park in center
        M190 S{bed_temp} 																			; wait for bed final temp
        M191 S{chamber_temp}																		; wait for chamber final temp, start _PRINTSTART_POSTSOAK when reached
    {% else %}
        {% if printer['output_pin skip_soak'].value|int > 0 %}
            _ECHO_INFO MSG="Heat Soak Disable continuing print..."
        {% else %}
            _ECHO_INFO MSG="Chamber at or above temp."
        {% endif %}

        {% if printer.heater_bed.temperature < (bed_temp - 2) %}									; - if chamber is already at temp, but bed is not fully heated:
            HEATSOAK T={bed_temp} MOVE=1															; heatsoak and park
            M190 S{bed_temp} 																		; wait for bed final temp
        {% else %}																					; - if chamber + bed are already at temp:
            HEATSOAK T={bed_temp} MOVE=0															; "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
        {% endif %}
        _PRINTSTART_POSTSOAK																				; if at temp, continue print_start (part 2)
    {% endif %}

# !! As mentioned above, only split into two parts because of my junky M191 macro. There is no need to do this otherwise.
[gcode_macro _PRINTSTART_POSTSOAK]
description: Secondary print start function to support M191 function								; set QGL flag to 1
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}			 			; reset base idle timeout
    M106 S0																							; turn off part cooling fan (from heatsoak)
    BED_MESH_CLEAR																					; clear bed mesh
    _ECHO_INFO MSG="Quad Gantry Leveling"
    QUAD_GANTRY_LEVEL               																; quad gantry level

[gcode_macro _PRINTSTART_QGL]
description: Final part of the start up script after the slicer injected filament selection
gcode:
    _VERIFY_QGL
    G90                                                                                             ; absolute positioning
    G0 Z20                                                                                          ; hop up to prevent knocking probe off after homing Z
    M106 S205
    M109 S150																						; cool nozzle to probe temp
    M106 S0
    _ECHO_INFO MSG="Meshbed Leveling"
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE                                                                              ; mesh
    G28 Z
    PARKPURGE																						; park nozzle above purge bucket
    STATUS_HEATING
    _ECHO_INFO MSG="Heat extruder to final temp"
    M109 S{printer["gcode_macro PRINT_START"].hotendtemp|int} 										; set & wait for hotend final temp

[gcode_macro _PRINTSTART_PRIME]
gcode:
    ENABLE_FILAMENT_SENSORS																			; enable filament sensor
    STATUS_PRINTING
    _ECHO_INFO MSG="Prime Line....."
    LINE_PURGE
    G21                                                 ; set units to millimeters
    G90                                                 ; use absolute coordinates
    M83                                                 ; use relative distances for extrusion
    _ECHO_INFO MSG="Starting Print: { printer.print_stats.filename }"
    STATUS_PRINTING

######################################

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 15.0) %}
        {% set z_safe = 15.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}						    ; reset base idle timeout
    UPDATE_DELAYED_GCODE ID=HOTEND_TIMEOUT DURATION=0													; clear pause hotend timeout
    DISABLE_FILAMENT_SENSORS																			; disable filament sensor
    UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0    													; break chamber temp wait loop if it happens to be running
    CLEAR_PAUSE																							; clear pause (from M191) if there is one
    M400                         	   																	; wait for buffer to clear
    G92 E0                                                                                              ; zero the extruder
    G1 E-5.0 F3600                                                                                      ; retract filament

    {% if unload|int == 1 or printer["gcode_macro PRINT_START"].swapcounter|int >= 0 %}                 ; If ERCF is used, eject filament after print
        {% if printer.extruder.target < printer.configfile.settings.extruder.min_extrude_temp %}
            _ECHO_INFO MSG="Restoring Hot End Temperature"												; Ensure hotend is to temp before ejecting filament
            STATUS_HEATING
            M109 S{printer["gcode_macro _SET_RESTORE_HOTENDTEMP"].restore_temp|int}						; wait for hotend to heat back up
        {% endif %}
        MMU_EJECT {rawparams}
    {% endif %}

    G91                             							 										; relative positioning
    G1 Z{z_safe} F900                  	    			 												; move nozzle up
    G90                           	    			 													; absolute positioning
    G1 X{printer.toolhead.axis_maximum.x - 5} Y{printer.toolhead.axis_maximum.y - 5} F19500.0  			; park nozzle at rear

    M104 S0						 	    			 													; turn hotend off
    M140 S0																								; turn bed off
    M107                         	   			 	 													; turn off part cooling fan

    BED_MESH_CLEAR																						; clear bed mesh
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=900    												; turn everything off in 15 min
    RESETSPEEDS																							; reset speed, accel etc to configured max values
    SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0														; disable XYE steppers (not z)
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
    {% if printer["gcode_macro PRINT_START"].swapcounter|int >= 0 %}
        _ECHO_INFO MSG="ERCF Swaps Completed: { printer["gcode_macro PRINT_START"].swapcounter }"
    {% endif %}
    _ECHO_INFO MSG="Print Finished: { printer.print_stats.filename }"
    status_part_ready

#####################################################################
# 	PAUSE/RESUME/CANCEL
#####################################################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    _ECHO_INFO MSG="CANCELING PRINT: { printer.print_stats.filename }"
    _PARK Z_HOP=20
    _MMU_CLEAR_POSITION
    TURN_OFF_HEATERS
    STATUS_READY
    BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    {% if printer.pause_resume.is_paused %}
        RESPOND MSG="Print is already paused"
      {% else %}
        _SET_RESTORE_HOTENDTEMP S={printer['extruder'].target|int}
        G92 E0
        G1 E-1.0 F1500.0
        G90
      {% endif %}
    _MMU_SAVE_POSITION
    BASE_PAUSE
    _MMU_PARK
    STATUS_BUSY
    SET_IDLE_TIMEOUT TIMEOUT=43200				    						; set timeout to 12 hours
    DISABLE_FILAMENT_SENSORS


# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}

      {% if not printer.pause_resume.is_paused %}
        RESPOND MSG="Print is not paused, resume aborted"
      {% else %}
        _ECHO_INFO MSG="Resume Print: { printer.print_stats.filename }"
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
        {% if printer["gcode_macro _SET_RESTORE_HOTENDTEMP"].restore_temp|int > 0 %}
            _ECHO_INFO MSG="Restoring Hot End Temperature"
            STATUS_HEATING
            M109 S{printer["gcode_macro _SET_RESTORE_HOTENDTEMP"].restore_temp|int}			 	; wait for hotend to heat back up
        {% endif %}
        ENABLE_FILAMENT_SENSORS
        _ECHO_INFO MSG="Resume Print: { printer.print_stats.filename }"
        _MMU_RESTORE_POSITION
        G90
        STATUS_PRINTING
        BASE_RESUME
    {% endif %}

[delayed_gcode HOTEND_TIMEOUT]
# Turn off hotend during pause event after timeout
gcode:
    M104 S0

#####################################################################
# 	PURGE LINE
#####################################################################

# Prime Line
[gcode_macro PRIME_LINE]
description: Draw a prime line
gcode:
    SAVE_GCODE_STATE NAME=BEFORE_PRIME
    M117 Prime Line
    G0 X5.0 Y5.0 F5000.0  					; Go to X5 Y5
    G1 Z0.25 F600            				; Set nozzle height
    G92 E0.0                				; reset extrusion distance
    G1 X60.0 E9.0 F1000.0   				; intro line
    #G1 X100.0 E12.5 F1000.0 				; intro line
    G1 X100.0 E10 F1000.0 					; intro line
    G92 E0.0                				; reset extrusion distance
    G1 Z5 F5000             				; Lift Z
    RESTORE_GCODE_STATE NAME=BEFORE_PRIME

#####################################################################
# 	FILAMENT SENSORS
#####################################################################

[gcode_macro DISABLE_FILAMENT_SENSORS]
description: Disable all filament sensors
gcode:
    #SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0

[gcode_macro ENABLE_FILAMENT_SENSORS]
description: Disable all filament sensors
gcode:
    # {% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
    # 	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
    # {% endif %}
    #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1


#####################################################################
# 	FILAMENT SENSORS
#####################################################################
[gcode_macro _SET_RESTORE_HOTENDTEMP]
description: set hot end temperature value for resume/end print
variable_restore_temp: 210
gcode:
    {% set s = params.S|default(210)|int %}
    SET_GCODE_VARIABLE MACRO=_SET_RESTORE_HOTENDTEMP VARIABLE=restore_temp VALUE={s}
    M118 Restore Hot End Temp Set To: {s}

#####################################################################
# 	CHAMBER TEMPERATURE WAIT
#####################################################################

# Wait for chamber temp, kick off wait loop if not already at temp
# !! I created this before temperature_wait existed. The only reason I still ise it is because it's cancelable.
# !! I honestly would not recommend using this, it's really junky,
# !! It pauses the print (if not at temp) during print_start, pausing CANNOT happen (properly at least) in the middle of a macro, so it requires PRINT_START being split into two parts.
# !! There may be a more graceful way to fix this but I can't be bothered. "There is nothing more permanent than a temporary solution"

## dummy output to get an switch in Mainsail
## any unused mcu pin can be defined you will not connect anything
## as I use the rPi as mcu I will use a pin from it
## Off -> M106 will update fan
## On -> M106 can not uodate fan
[output_pin skip_soak]
pin: rpi: gpio16
value:0

[gcode_macro M191]
description: Wait for the chamber temp to reach desired level
variable_chambertargettemp: 0
variable_waittime: 0.0
gcode:
    # Parameters
    {% set s = params.S|default(1)|float %}
    {% set curtemp = printer["temperature_sensor enclosure_temp"].temperature|default(0)|float %}

    SET_GCODE_VARIABLE MACRO=M191 VARIABLE=chambertargettemp VALUE={s}									; set target temp for reference outside of the macro (for the loop)
    SET_GCODE_VARIABLE MACRO=M191 VARIABLE=waittime VALUE=0.0

    SET_IDLE_TIMEOUT TIMEOUT=18000																		; change timeout to 5 hrs for soak

    _ECHO_INFO MSG="Chamber currently at {curtemp}C heating to {s}C"

    {% if (curtemp < s|float) and (printer['output_pin skip_soak'].value|int < 1) %}					; ##IF CHAMBER TEMP IS NOT ALREADY REACHED##
        _ECHO_INFO MSG="Chamber not at temp yet, pausing..."
            {% if not printer.pause_resume.is_paused %}
                BASE_PAUSE														   						; pause if not already paused
            {% endif %}
        UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=30						   							; start wait loop
    {% else %}
        {% if printer['output_pin skip_soak'].value|int > 0 %}
            _ECHO_INFO MSG="Heat Soak Disable continuing print..."
        {% else %}
            _ECHO_INFO MSG="Chamber at or above temp, continuing..."				     				; ##IF CHAMBER TEMP IS ALREADY REACHED##
        {% endif %}
        UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0                           							; break wait loop if it happens to be running already (shouldn't be)
        {% if printer.pause_resume.is_paused %}
            BASE_RESUME															   						; resume if paused (shouldn't be)
        {% endif %}
        _PRINTSTART_POSTSOAK													   								; run part 2 of PRINT_START
    {% endif %}

# This part will loop until the desired chamber temp is reached, then resume the print
[delayed_gcode M191-WAIT]
gcode:
    STATUS_HEATING
    {% set calcwaittime = printer["gcode_macro M191"].waittime|float + 0.5 %}
    {% set setpoint = printer["gcode_macro M191"].chambertargettemp|float %}
    {% set curtemp = printer["temperature_sensor enclosure_temp"].temperature|default(0)|float %}

    SET_GCODE_VARIABLE MACRO=M191 VARIABLE=waittime VALUE={calcwaittime}

    {% if (curtemp >= setpoint) or (printer['output_pin skip_soak'].value|int > 0) %} 					; ##IF CHAMBER TEMP IS REACHED##
        {% if printer['output_pin skip_soak'].value|int > 0 %}
            _ECHO_INFO MSG="Heat Soak Disable continuing print..."
        {% endif %}
        _ECHO_INFO MSG="Chamber reached {curtemp}C / {setpoint}C after {calcwaittime}min, continuing..."
        {% if printer.pause_resume.is_paused %}
            BASE_RESUME														   											 ; break loop, resume print
            _PRINTSTART_POSTSOAK											   												 ; run part 2 of PRINT_START
        {% endif %}
    {% else %}																											 ; ##IF CHAMBER TEMP IS NOT YET REACHED##
        _ECHO_INFO MSG="Chamber heating {curtemp}C / {setpoint}C after {calcwaittime} min"
        UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=30						   											 ; continue waiting loop
    {% endif %}


[gcode_macro HEATSOAK]
description: Heat and move printhead to the center and turn on fan for heat soak
gcode:
    # Parameters
    {% set t = params.T|default(90)|int %}
    {% set move = params.MOVE|default(1)|int %}
    STATUS_HEATING
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)

    M140 S{t}										; heat bed
    {% if t >= 100 %}
        M104 S150									; set hotend to no-ooze temp
        M106 S205 									; turn on part fan (80%)
    {% else %}
        M106 S0 									; turn part fan off
    {% endif %}
    {% if move == 1 %}
        _CG28										; conditional home
        PARKCENTERLOW						 	    ; move to bed
    {% endif %}


#####################################################################
# 	MISC START MACROS
#####################################################################

[gcode_macro _VERIFY_QGL]
gcode:
     _ECHO_INFO MSG="Verifying QGL Status"
    {% if printer.quad_gantry_level.applied == false %}
        ECHO_INFO MSG="ABORT PRINT: QGL FAILED !!!!!!"
        CANCEL_PRINT
        { action_raise_error("ABORT PRINT: QGL FAILED !!!!!!") }
    {% else %}
        _ECHO_INFO MSG="QGL Applied Successfully"
    {% endif %}


[gcode_macro _PARK]
description: Park toolhead safely away from print
gcode:
    {% set Z_HOP = params.Z_HOP|default(5)|float %}
    {% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_park = printer.toolhead.axis_minimum.y|float + 5.0 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}

    {% if act_z < (max_z - Z_HOP) %}
        {% set z_safe = Z_HOP %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}

    G91
    G1 Z{z_safe} F900
    G90
    G0 X{x_park} Y{y_park} F6000



[gcode_macro SET_HOMING_CURRENT]
## Reduce Current During Homing
gcode:
  SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings['tmc2209 stepper_z'].run_current * 0.3}
  SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings['tmc2209 stepper_z1'].run_current * 0.3}
  SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings['tmc2209 stepper_z2'].run_current * 0.3}
  SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings['tmc2209 stepper_z3'].run_current * 0.3}
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.settings['tmc2209 stepper_x'].run_current * 0.5}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.configfile.settings['tmc2209 stepper_y'].run_current * 0.5}

[gcode_macro SET_HOMING_CURRENT_Z]
## Reduce Current During Homing
gcode:
  SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings['tmc2209 stepper_z'].run_current * 0.3}
  SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings['tmc2209 stepper_z1'].run_current * 0.3}
  SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings['tmc2209 stepper_z2'].run_current * 0.3}
  SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings['tmc2209 stepper_z3'].run_current * 0.3}

[gcode_macro SET_DEFAULT_CURRENT]
## Reduce Current During Homing
gcode:
  SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer.configfile.settings['tmc2209 stepper_z'].run_current}
  SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={printer.configfile.settings['tmc2209 stepper_z1'].run_current}
  SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={printer.configfile.settings['tmc2209 stepper_z2'].run_current}
  SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={printer.configfile.settings['tmc2209 stepper_z3'].run_current}
  SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer.configfile.settings['tmc2209 stepper_x'].run_current}
  SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer.configfile.settings['tmc2209 stepper_y'].run_current}
