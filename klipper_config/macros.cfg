#####################################################################
# 	Print Start/Stop Macros
#####################################################################

[gcode_macro PRINT_START]
# For setting the parameters as persistent variables so they can be referenced in PRINT_START2
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
variable_initextruder: 0
variable_swapcounter: 0
gcode:
    {% set chamber_temp = params.CHAMBER_TEMP|default(0)|int %}
    {% set hotend_temp = params.EXTRUDER_TEMP|default(210)|int %}
    {% set bed_temp = params.BED_TEMP|default(60)|int %}
    {% set init_extruder = params.EXTRUDER|default(-1)|int %}

    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed_temp}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend_temp}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber_temp}
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=initextruder VALUE={init_extruder}
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=swapcounter VALUE=0

    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0      											; cancel off timer (if there is one)
	UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=0 
	UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0 													; cancel M191 timer (shouldn't be active)
	UPDATE_DELAYED_GCODE ID=HOTEND_TIMEOUT DURATION=0												; clear pause hotend timeout
    UPDATE_DELAYED_GCODE ID=disable_heater DURATION=0

	LIGHTS_ON																						; turn light on
	#SET_FAN_SPEED FAN=exhaust_fan SPEED=0															; turn off exhaust fan if on from previous print

	RESETSPEEDS																						; reset speeds to defaults
	SET_GCODE_OFFSET Z=0																			; reset Z offset

	_ECHO_INFO MSG="Bring bed to temp..."	
	G28																								; home
	PARKCENTER						 																; move to center of bed
    STATUS_HEATING
	M104 S140																						; set hotend to no-ooze temp
	M190 S{bed_temp} 																				; warm bed
	{% if bed_temp >= 70 %}	
		SET_FAN_SPEED FAN=nevermore SPEED=0.9														; turn on nevermore to circulate air
	{% endif %}
	#G4 P300000                      																; wait min 5 min for bed to warm

	{% if not printer["temperature_sensor enclosure_temp"].temperature >= chamber_temp %}		
		_ECHO_INFO MSG="Chamber not at temp yet, pausing..."										; - if chamber is not at temp yet:
		HEATSOAK T={bed_temp} MOVE=1																; heatsoak and park in center
		M190 S{bed_temp} 																			; wait for bed final temp
		M191 S{chamber_temp}																		; wait for chamber final temp, start PRINT_START2 when reached
	{% else %}
		_ECHO_INFO MSG="Chamber at or above temp."
		{% if printer.heater_bed.temperature < (bed_temp - 2) %}									; - if chamber is already at temp, but bed is not fully heated:
			HEATSOAK T={bed_temp} MOVE=1															; heatsoak and park
			M190 S{bed_temp} 																		; wait for bed final temp
		{% else %}																					; - if chamber + bed are already at temp:
			HEATSOAK T={bed_temp} MOVE=0															; "heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
		{% endif %}
		PRINT_START2																				; if at temp, continue print_start (part 2)
	{% endif %}

# !! As mentioned above, only split into two parts because of my junky M191 macro. There is no need to do this otherwise.
[gcode_macro PRINT_START2]
description: Secondary print start function to support M191 function								; set QGL flag to 1
gcode:
	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}			 			; reset base idle timeout
	M106 S0																							; turn off part cooling fan (from heatsoak)
	BED_MESH_CLEAR																					; clear bed mesh
	_ECHO_INFO MSG="Quad Gantry Leveling"
    QUAD_GANTRY_LEVEL               																; quad gantry level
	_VERIFY_QGL
	G90 													 										; absolute positioning#BED_MESH_CALIBRATE																				; mesh
	DOCK_PROBE_UNLOCK																				; stow probe, unlock
	PARKPURGE																						; park nozzle above purge bucket
    STATUS_HEATING
	_ECHO_INFO MSG="Heat extruder to final temp"
	M109 S{printer["gcode_macro PRINT_START"].hotendtemp|int} 										; set & wait for hotend final temp
	G4 P200
    {% if printer["gcode_macro PRINT_START"].initextruder|int >= 0 %}                               ; Check for proper extruder (-1 means use what is loaded aka no ERCF)
	  	ERCF_HOME
		{% if printer["gcode_macro PRINT_START"].initextruder|int == 0 %}
		ERCF_CHANGE_TOOL_STANDALONE TOOL=0
		{% else %}
		ERCF_CHANGE_TOOL_STANDALONE TOOL={printer["gcode_macro PRINT_START"].initextruder|int}
		{% endif %}
	{% endif %}
    _ECHO_INFO MSG="Cleaning nozzle"
	CLEAN_NOZZLE																					; clean nozzle while hot
	#G0 Z20
	G28 Z
	CALIBRATE_Z																						; calibrate z offset
	DOCK_PROBE_UNLOCK																				; stow probe, unlock
	LOAD_MESH_BED_PROFILE                                                                   		; load mesh
	#SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1												; enable filament sensor
	# {% if printer["gcode_macro PRINT_START"].bedtemp|int <= 70 %}	
	# 	SET_FAN_SPEED FAN=exhaust_fan SPEED=0.1														; set chamber fan to 10%
	# {% endif %}
	_ECHO_INFO MSG="Prime Line....."
	PRIME_LINE 																						; draw prime line
	G21                                                 ; set units to millimeters
    G90                                                 ; use absolute coordinates
    M83                                                 ; use relative distances for extrusion
	
	_ECHO_INFO MSG="Starting Print: { printer.print_stats.filename }"
	STATUS_PRINTING

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
  	SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}						    ; reset base idle timeout
	UPDATE_DELAYED_GCODE ID=HOTEND_TIMEOUT DURATION=0													; clear pause hotend timeout
	#SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
	SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0													; disable filament sensor
	UPDATE_DELAYED_GCODE ID=M191-WAIT DURATION=0    													; break chamber temp wait loop if it happens to be running
	CLEAR_PAUSE																							; clear pause (from M191) if there is one
	{% if printer["gcode_macro PRINT_START"].initextruder|int >= 0 %}                                   ; If ERCF is used, eject filament after print
		ERCF_EJECT
	{% endif %}
	# {% if printer.heater_bed.temperature <= 80 %}												
	# 	SET_FAN_SPEED FAN=exhaust_fan SPEED=1  															; crank exhaust fan to 100% to evacuate chamber
	# {% endif %}													
	M400                         	   																	; wait for buffer to clear
	G92 E0                                                                                              ; zero the extruder
    G1 E-5.0 F3600                                                                                      ; retract filament
	M104 S0						 	    			 													; turn hotend off
	M140 S0																								; turn bed off
    M107                         	   			 	 													; turn off part cooling fan
	G91                             							 										; relative positioning
    G1 Z5 F3000                  	    			 													; move nozzle up 5mm
    G90                           	    			 													; absolute positioning
	G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F19500.0  					; park nozzle at rear
	BED_MESH_CLEAR																						; clear bed mesh									
	UPDATE_DELAYED_GCODE ID=EXHAUST_OFF DURATION=300 													; turn exhaust off in 5 min
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=900    												; turn everything off in 15 min
	RESETSPEEDS																							; reset speed, accel etc to configured max values
	SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=0														; disable XYE steppers (not z)
    SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=0
    SET_STEPPER_ENABLE STEPPER=extruder ENABLE=0
	_ECHO_INFO MSG="Print Finished: { printer.print_stats.filename }"
	{% if printer["gcode_macro PRINT_START"].initextruder|int >= 0 %} 
		_ECHO_INFO MSG="ERCF Swaps Completed: { printer["gcode_macro PRINT_START"].swapcounter }"
	{% endif %}
    STATUS_READY

#####################################################################
# 	PAUSE/RESUME/CANCEL
#####################################################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
	SDCARD_RESET_FILE
	PRINT_END
	_ECHO_INFO MSG="Print Aborted: { printer.print_stats.filename }"
	STATUS_READY
	BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters	
	{% set x_park = printer.toolhead.axis_maximum.x|float / 2 %}
	{% set y_park = printer.toolhead.axis_minimum.y|float + 5.0 %}
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 15.0) %}
		{% set z_safe = 15.0 %}
	{% else %}
		{% set z_safe = max_z - act_z %}
	{% endif %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}	
	STATUS_BUSY	
	G92 E0
	G1 E-1.0 F1500.0
	G90
	SAVE_GCODE_STATE NAME=PAUSE_state
	BASE_PAUSE
	G91
	G1 Z{z_safe} F900
	G90
	G0 X{x_park} Y{y_park} F6000
	UPDATE_DELAYED_GCODE ID=HOTEND_TIMEOUT DURATION=600						; turn off hotend after 10 min																										
	SET_IDLE_TIMEOUT TIMEOUT=43200				    						; set timeout to 12 hours

# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}

	{% if printer["gcode_macro ERCF_PAUSE"].is_paused|int != 0 %}				; Ensure ERCF is ready to continue
        _ECHO_INFO MSG="You can't resume the print without unlocking the ERCF first."
        _ECHO_INFO MSG="Run ERCF_UNLOCK and solve any issue before hitting Resume again"
	{% else %}
		_ECHO_INFO MSG="Resume Print: { printer.print_stats.filename }"
		#SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}	
		UPDATE_DELAYED_GCODE ID=HOTEND_TIMEOUT DURATION=0
		{% if etemp > 0 %}
			_ECHO_INFO MSG="Restoring Hot End Temperature"
            STATUS_HEATING
            M109 S{etemp|int}													; wait for hotend to heat back up
		{% endif %}																; restore position
		RESTORE_GCODE_STATE NAME=PAUSE_state
        G90
		{% if printer["gcode_macro ERCF_VAR"].clog_detection|int == 1 %}
				SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
		{% endif %}
		_ECHO_INFO MSG="Resume Print: { printer.print_stats.filename }"
        STATUS_PRINTING
		BASE_RESUME
	{% endif %}

[delayed_gcode HOTEND_TIMEOUT]
# Turn off hotend during pause event after timeout
gcode:
	M104 S0

#####################################################################
# 	PURGE LINE
#####################################################################

# Prime Line
[gcode_macro PRIME_LINE]
description: Draw a prime line
gcode:
    SAVE_GCODE_STATE NAME=BEFORE_PRIME
    M117 Prime Line
    G0 X5.0 Y5.0 F5000.0  					; Go to X5 Y5
    G1 Z0.25 F600            				; Set nozzle height
    G92 E0.0                				; reset extrusion distance
    G1 X60.0 E9.0 F1000.0   				; intro line
    #G1 X100.0 E12.5 F1000.0 				; intro line
    G1 X100.0 E10 F1000.0 					; intro line
    G92 E0.0                				; reset extrusion distance
    G1 Z1 F5000             				; Lift Z
    RESTORE_GCODE_STATE NAME=BEFORE_PRIME  

# Purge Line
[gcode_macro PURGE]
description: Draw a purge line
gcode:
    SAVE_GCODE_STATE NAME=BEFORE_PURGE
    M117 Purging
    G0 X5 Y5 F5000
    G91
    G1 E9 F1000
    G90
    RESTORE_GCODE_STATE NAME=BEFORE_PURGE


